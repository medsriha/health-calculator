{
	"referenceGuide" : "Cite all the reference sources in the required format. Proper citations will help you avoid unnecessary trouble but does not make it acceptable to copy code. Read the course and university policy statements in this regard. Read the JSON grammar from the Internet if needed.",
	"myAndrewID":"Team4",
	"websites":[
	{
		"title":"GCP Vision. Experimental code",
		"url":"https://cloud.google.com/vision/docs/reference/libraries",
		"code":"// Imports the Google Cloud client library
			import com.google.cloud.vision.v1.AnnotateImageRequest;
			import com.google.cloud.vision.v1.AnnotateImageResponse;
			import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;
			import com.google.cloud.vision.v1.EntityAnnotation;
			import com.google.cloud.vision.v1.Feature;
			import com.google.cloud.vision.v1.Feature.Type;
			import com.google.cloud.vision.v1.Image;
			import com.google.cloud.vision.v1.ImageAnnotatorClient;
			import com.google.protobuf.ByteString;

			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.util.ArrayList;
			import java.util.List;

			public class QuickstartSample {
			  public static void main(String... args) throws Exception {
			    // Instantiates a client
			    try (ImageAnnotatorClient vision = ImageAnnotatorClient.create()) {

			      // The path to the image file to annotate
			      String fileName = "./resources/wakeupcat.jpg";

			      // Reads the image file into memory
			      Path path = Paths.get(fileName);
			      byte[] data = Files.readAllBytes(path);
			      ByteString imgBytes = ByteString.copyFrom(data);

			      // Builds the image annotation request
			      List<AnnotateImageRequest> requests = new ArrayList<>();
			      Image img = Image.newBuilder().setContent(imgBytes).build();
			      Feature feat = Feature.newBuilder().setType(Type.LABEL_DETECTION).build();
			      AnnotateImageRequest request = AnnotateImageRequest.newBuilder()
			          .addFeatures(feat)
			          .setImage(img)
			          .build();
			      requests.add(request);

			      // Performs label detection on the image file
			      BatchAnnotateImagesResponse response = vision.batchAnnotateImages(requests);
			      List<AnnotateImageResponse> responses = response.getResponsesList();

			      for (AnnotateImageResponse res : responses) {
			        if (res.hasError()) {
			          System.out.printf("Error: %s\n", res.getError().getMessage());
			          return;
			        }

			        for (EntityAnnotation annotation : res.getLabelAnnotationsList()) {
			        }
		      	}
		    	}
		  	}
		}",
		"description":"GCP Vision API in Java"

	}
	
		]
}